void {{ layer_name }}(mat_t* input, mat_t* output) {
  uint16_t in_ch = input->dims[1];
  uint16_t rows = input->dims[2];
  uint16_t cols = input->dims[3];
  uint16_t in_row_stride = input->strides[2];
  uint16_t in_len = input->strides[1];
  uint16_t out_len = output->strides[1];
  uint16_t out_rows = output->dims[2];
  uint16_t height = {{ height }};
  uint16_t width = {{ width }};
  uint16_t pool_row_offset = in_row_stride * height;
  int32_t agg;

  /* No need for double buffering (for loop indices) as each output is independant */
  if (intermittent_status[COMPUTE_CK] == INTERMITTENT_{{ layer_name }}_PREPARE) {
    if (intermittent_status[COMPUTE_IO_COL] > cols) {
      VOLATILE_WRITE(0, COMPUTE_IO_COL);
      uint16_t next_r = intermittent_status[COMPUTE_IO_ROW] + height;
      VOLATILE_WRITE(next_r, COMPUTE_IO_ROW);
    }

    if (intermittent_status[COMPUTE_IO_ROW] > rows) {
      VOLATILE_WRITE(0, COMPUTE_IO_ROW);
      uint16_t next_s = intermittent_status[COMPUTE_IN_CH] + 1;
      VOLATILE_WRITE(next_s, COMPUTE_IN_CH);
    }

    uint16_t ch_offset = intermittent_status[COMPUTE_IN_CH] * in_len + \
      intermittent_status[COMPUTE_IO_ROW] * in_row_stride;
    uint16_t out_offset = intermittent_status[COMPUTE_IN_CH] * out_len + \
      (intermittent_status[COMPUTE_IO_ROW] / height) * out_rows + \
      (intermittent_status[COMPUTE_IO_COL] / width);
    for (uint16_t s = intermittent_status[COMPUTE_IN_CH]; s < in_ch; ++s) {
      for (uint16_t r = intermittent_status[COMPUTE_IO_ROW]; r < rows; r += height) {
        uint16_t in_row_offset = ch_offset + intermittent_status[COMPUTE_IO_COL];
        for (uint16_t c = intermittent_status[COMPUTE_IO_COL]; c < cols; c += width) {
          agg = 0;
          uint16_t h = r + height;
          uint16_t w = c + width;
          uint16_t h_offset = in_row_offset;
          for (uint16_t i = r; i < h; ++i) {
            uint16_t in_offset = h_offset;
            for (uint16_t j = c; j < w; ++j) {
              int16_t in_data = *(input->data + in_offset);
              agg = __saturated_add_iq31(agg, in_data);
              ++in_offset;
            }
            h_offset += in_row_stride;
          }
          agg /= {{ height * width }};
          *(output->data + out_offset) = agg;
          ++out_offset;
          in_row_offset += width;

          uint16_t next_c = c + width;
          VOLATILE_WRITE(next_c, COMPUTE_IO_COL);
        }
        ch_offset += pool_row_offset;

        VOLATILE_WRITE(0, COMPUTE_IO_COL);
        uint16_t next_r = r + height;
        VOLATILE_WRITE(next_r, COMPUTE_IO_ROW);
      }

      VOLATILE_WRITE(0, COMPUTE_IO_ROW);
      uint16_t next_s = s + 1;
      VOLATILE_WRITE(next_s, COMPUTE_IN_CH);
    }

    VOLATILE_WRITE(INTERMITTENT_{{ layer_name }}_EXIT, COMPUTE_CK);
  }

  if (intermittent_status[COMPUTE_CK] == INTERMITTENT_{{ layer_name }}_EXIT) {
    intermittent_status[COMPUTE_IO_COL] = 0;
    intermittent_status[COMPUTE_IO_ROW] = 0;
    intermittent_status[COMPUTE_IN_CH] = 0;
  }
}

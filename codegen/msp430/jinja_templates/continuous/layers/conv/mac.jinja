{#- SPDX-License-Identifier: AGPL-3.0-or-later -#}
{#- Copyright (C) 2025 Mingyuan Xiang -#}

#define _OUTPUT_SIZE {{ out_len }}
#define _LEA_ADD_SIZE {{ lea_dst_size }}
#define _LEA_REMAIN_SIZE (_OUTPUT_SIZE % _LEA_ADD_SIZE)
{%- if padding %}
#define _PADDING_TOP {{ padding["top"] }}
#define _PADDING_BOTTOM {{ padding["bottom"] }}
#define _PADDING_RIGHT {{ padding["right"] }}
#define _PADDING_LEFT {{ padding["left"] }}
{%- endif %}
{% if global_mem_buffer %}
/* assign the lea buffer pointer */
#define lea_src (lea_buffer)
#define lea_flt (lea_buffer + {{ lea_src_size }})
#define lea_tmp (lea_buffer + {{ lea_src_size + lea_flt_size }})
#define lea_dst (lea_buffer + {{ lea_src_size + lea_flt_size + lea_tmp_size }})
{% endif %}
#define _STRIDE_ROW_SIZE {{ stride_row }}
#define _STRIDE_COL_SIZE {{ stride_col }}
#define _KERNEL_ROW_SIZE {{ flt_size }}
#define _KERNEL_COL_SIZE {{ flt_col_size }}
#define _FLT_LEN (_KERNEL_ROW_SIZE * _KERNEL_COL_SIZE)
{% if global_mem_buffer %}
#define _LEA_BIAS_ADD_SIZE {{ lea_buffer_size }}
{%- else %}
#define _LEA_BIAS_ADD_SIZE {{ lea_src_size }}
{% endif %}
#define _LEA_BIAS_REMAIN_SIZE (_OUTPUT_SIZE % _LEA_BIAS_ADD_SIZE)
{% if lea_opt %}
static inline __attribute__((always_inline)) void set_offset(int16_t offset) {
  offset_vector[0] = offset;
  offset_vector[1] = offset;
}

static inline __attribute__((always_inline)) void new_offset_q15(const _q15* src, _q15* dst) {
  lea_offset_params->output = MSP_LEA_CONVERT_ADDRESS(dst);

  /* Load source arguments to LEA. */
  LEAPMS0 = MSP_LEA_CONVERT_ADDRESS(src);
  LEAPMS1 = MSP_LEA_CONVERT_ADDRESS(lea_offset_params);

  /* Invoke the LEACMD__ADDMATRIX command. */
  msp_lea_invokeCommand(LEACMD__ADDMATRIX);
}

static inline __attribute__((always_inline)) void new_add_q15(const _q15* srcA, const _q15* srcB, _q15* dst) {
  lea_add_params->input2 = MSP_LEA_CONVERT_ADDRESS(srcB);
  lea_add_params->output = MSP_LEA_CONVERT_ADDRESS(dst);

  /* Load source arguments to LEA. */
  LEAPMS0 = MSP_LEA_CONVERT_ADDRESS(srcA);
  LEAPMS1 = MSP_LEA_CONVERT_ADDRESS(lea_add_params);

  /* Invoke the LEACMD__ADDMATRIX command. */
  msp_lea_invokeCommand(LEACMD__ADDMATRIX);
}

static inline __attribute__((always_inline)) void new_mac_q15(const _q15 *srcA, const _q15 *srcB) {
  lea_mac_params->input2 = MSP_LEA_CONVERT_ADDRESS(srcB);

  /* Load source arguments to LEA. */
  LEAPMS0 = MSP_LEA_CONVERT_ADDRESS(srcA);
  LEAPMS1 = MSP_LEA_CONVERT_ADDRESS(lea_mac_params);

  /* Invoke the LEACMD__MAC command. */
  msp_lea_invokeCommand(LEACMD__MAC);
}
{%- endif %}

void {{ layer_name }}(mat_t* input, mat_t* output, mat_t* weight, mat_t* bias) {
  uint16_t in_channels = input->dims[1];
  uint16_t out_channels = output->dims[1];
  uint16_t output_len = output->strides[1];
  uint16_t input_len = input->strides[1];
  uint16_t kernel_row_size = _KERNEL_ROW_SIZE;
  uint16_t kernel_col_size = _KERNEL_COL_SIZE;

  uintptr_t flt_lea_addr = (uintptr_t)lea_flt;
  uintptr_t flt_fram_addr = (uintptr_t)(weight->data);
  uintptr_t flt_addr_offset = _FLT_LEN * sizeof(int16_t);
  uintptr_t flt_channel_offset = weight->strides[0] * sizeof(int16_t);
  uintptr_t flt_addr_col_offset = kernel_col_size * sizeof(int16_t);
  uintptr_t input_fram_addr = (uintptr_t)(input->data);
  uintptr_t input_channel_addr = input_fram_addr;
  uintptr_t input_channel_offset = input_len * sizeof(int16_t);
  uintptr_t output_fram_addr = (uintptr_t)(output->data);
  uintptr_t output_addr_offset = output_len * sizeof(int16_t);

  uint16_t input_line_size = input->dims[3];
  uint16_t output_line_size = output->dims[3];
  uint16_t output_line_num = output->dims[2];
  uint16_t input_line_size_offset = input_line_size * sizeof(int16_t);
  uint16_t input_line_strided_size = input_line_size * _STRIDE_ROW_SIZE;
  uint16_t input_line_size_strided_offset = input_line_strided_size * sizeof(int16_t);

  uint16_t lea_remain_size = _LEA_REMAIN_SIZE;
  {%- if (out_len % lea_dst_size) != 0 %}
  uint16_t lea_remain_size_aligned = MAKE_ALIGN_2(lea_remain_size);
  uintptr_t output_remain_size_offset = lea_remain_size * sizeof(int16_t);
  {%- endif %}
  {%- if out_len >= lea_dst_size %}
  uintptr_t output_lea_min_size_offset = _LEA_ADD_SIZE * sizeof(int16_t);
  {%- endif %}

  uint16_t lea_bias_remain_size = _LEA_BIAS_REMAIN_SIZE;
  {%- if (global_mem_buffer and (out_len % lea_buffer_size) != 0) or ((not global_mem_buffer) and (out_len % lea_src_size) != 0) %}
  uintptr_t output_bias_remain_size_offset = lea_bias_remain_size * sizeof(int16_t);
  {%- endif %}
  {%- if (global_mem_buffer and out_len >= lea_buffer_size) or ((not global_mem_buffer) and out_len >= lea_src_size) %}
  uintptr_t output_lea_bias_min_size_offset = _LEA_BIAS_ADD_SIZE * sizeof(int16_t);
  {%- endif %}
  uint16_t lea_remain_bias_size_aligned = MAKE_ALIGN_2(lea_bias_remain_size);

  uintptr_t src_lea_addr = (uintptr_t)lea_src;
  uintptr_t dst_lea_addr = (uintptr_t)lea_dst;
  {% if flt_len % 2 != 0 %}
  /* set the aligned position to be zeros */
  lea_src[_FLT_LEN] = 0;
  lea_flt[_FLT_LEN] = 0;
  {%- endif %}

  {%- if lea_opt %}
  mac_init(MAKE_ALIGN_2(_FLT_LEN));
  add_init(MAKE_ALIGN_2(_LEA_ADD_SIZE));
  offset_init(lea_remain_bias_size_aligned);
  {%- else %}
  msp_mac_q15_params mac_params = { .length = MAKE_ALIGN_2(_FLT_LEN) };
  msp_add_q15_params add_params = { .length = MAKE_ALIGN_2(_LEA_ADD_SIZE) };
  msp_offset_q15_params offset_params = { .length = lea_remain_bias_size_aligned, .offset = 0 };
  {%- endif %}
  {%- if has_adaptive_gen_mem %}
  uint16_t dst_pos;
  uint16_t s;
  {%- if flt_col_size < adaptive_gen_mem_size %}
  uint16_t input_channel_pos = 0;
  uint16_t input_fram_pos = 0;
  {%- endif %}
  {%- endif %}

  {%- if dma_opt %}
  uint16_t zero = 0;
  {%- endif %}

  {%- if padding %}

  /* Pad the input for ({{ padding["left"] }}, {{ padding["right"] }}, {{ padding["top"] }}, {{ padding["bottom"] }}) */
  {%- if dma_opt %}
  DMA_setWord(output_fram_addr, zero, GET_MAT_SIZE(input));
  {%- else %}
  memset(output->data, 0, GET_MAT_SIZE(input)*sizeof(int16_t));
  {%- endif %}
  uint16_t input_line_num = input->dims[2] - _PADDING_TOP - _PADDING_BOTTOM;
  uint16_t input_line_size_bf = input->dims[3] - _PADDING_RIGHT - _PADDING_LEFT;
  _q15* padding_ptr_in = input->data;
  _q15* padding_ptr_out = output->data;
  for (uint16_t i = 0; i < in_channels; ++i) {
    {%- for n in range(padding["top"]) %}
    padding_ptr_out += input_line_size;
    {%- endfor %}
    for (uint16_t j = 0; j < input_line_num; ++j) {
      padding_ptr_out += _PADDING_LEFT;
      {%- if has_adaptive_gen_mem and (in_line_size - padding["left"] - padding["right"] < adaptive_gen_mem_size) %}
      {%- for n in range(in_line_size - padding["left"] - padding["right"]) %}
      *padding_ptr_out = *padding_ptr_in;
      ++padding_ptr_out;
      ++padding_ptr_in;
      {%- endfor %}

      padding_ptr_out += _PADDING_RIGHT;
      {%- else %}
      DMA_makeTransfer((uintptr_t)padding_ptr_in, (uintptr_t)padding_ptr_out, input_line_size_bf);
      padding_ptr_in += input_line_size_bf;
      padding_ptr_out += (_PADDING_RIGHT + input_line_size_bf);
      {%- endif %}
    }
    {%- for n in range(padding["bottom"]) %}
    padding_ptr_out += input_line_size;
    {%- endfor %}
  }

  DMA_makeTransfer(output_fram_addr, input_fram_addr, GET_MAT_SIZE(input));
  {%- endif %}
  {% if dma_opt %}
  DMA_setWord(output_fram_addr, zero, GET_MAT_SIZE(output));
  {%- else %}
  memset(output->data, 0, GET_MAT_SIZE(output)*sizeof(int16_t));
  {%- endif %}

  /* convolution */
{%- if group != 1 %}
  {%- if has_adaptive_gen_mem and (out_len % lea_dst_size) < adaptive_gen_mem_size %}
  uint16_t output_channel_pos = 0;
  {%- endif %}
  uintptr_t output_channel_addr = output_fram_addr;
{%- endif %}
  for (uint16_t i = 0; i < in_channels; ++i) {
{%- if group == 1 %}
    {%- if has_adaptive_gen_mem and (out_len % lea_dst_size) < adaptive_gen_mem_size %}
    uint16_t output_channel_pos = 0;
    {%- endif %}
    uintptr_t output_channel_addr = output_fram_addr;
{%- endif %}
    uintptr_t flt_tmp_addr = flt_fram_addr;
    uint16_t tmp_input_addr_offset = sizeof(int16_t) * _STRIDE_COL_SIZE;

    /* assemble input to a matrix in mac_buffer */
    {%- if has_adaptive_gen_mem and flt_col_size < adaptive_gen_mem_size %}
    uint16_t mac_buffer_pos = 0;
    input_channel_pos = input_fram_pos;
    {%- else %}
    uintptr_t mac_buffer_addr = (uintptr_t)lupe_buffer_meta.data;
    input_channel_addr = input_fram_addr;
    {%- endif %}
    for (uint16_t m = 0; m < output_line_num; ++m) {
      {%- if has_adaptive_gen_mem and flt_col_size < adaptive_gen_mem_size %}
      uint16_t tmp_input_pos = input_channel_pos;
      {%- else %}
      uintptr_t tmp_input_addr = input_channel_addr;
      {%- endif %}
      for (uint16_t n = 0; n < output_line_size; ++n) {
        {%- if has_adaptive_gen_mem and flt_col_size < adaptive_gen_mem_size %}
        uint16_t tmp_input_row_pos = tmp_input_pos;
        {%- else %}
        uintptr_t tmp_input_row_addr = tmp_input_addr;
        {%- endif %}
        for (uint16_t k = 0; k < kernel_row_size; ++k) {
          {%- if has_adaptive_gen_mem and flt_col_size < adaptive_gen_mem_size %}
          s = tmp_input_row_pos;
          {%- for n in range(flt_col_size) %}
          lupe_buffer_meta.data[mac_buffer_pos] = input->data[s];
          s++;
          mac_buffer_pos++;
          {%- endfor %}

          tmp_input_row_pos += input_line_size;
          {%- else %}
          DMA_makeTransfer(tmp_input_row_addr, mac_buffer_addr, kernel_col_size);

          tmp_input_row_addr += input_line_size_offset;
          mac_buffer_addr += flt_addr_col_offset;
          {%- endif %}
        }
        {%- if has_adaptive_gen_mem and flt_col_size < adaptive_gen_mem_size %}
        tmp_input_pos += _STRIDE_COL_SIZE;
        {%- else %}
        tmp_input_addr += tmp_input_addr_offset;
        {%- endif %}
      }
      {%- if has_adaptive_gen_mem and flt_col_size < adaptive_gen_mem_size %}
      input_channel_pos += input_line_strided_size;
      {%- else %}
      input_channel_addr += input_line_size_strided_offset;
      {%- endif %}
    }
{% if group == 1 %}
    for (uint16_t j = 0; j < out_channels; ++j) {
{%- endif %}
      uintptr_t mac_input_addr = (uintptr_t)lupe_buffer_meta.data;
      {%- if has_adaptive_gen_mem and (out_len % lea_dst_size) < adaptive_gen_mem_size %}
      uint16_t tmp_output_pos = output_channel_pos;
      {%- endif %}
      uintptr_t tmp_output_addr = output_channel_addr;

      /*
       * send kernel to LEA RAM
       * assume (lea_flt size >= flt_len + 1)
       */
      DMA_makeTransfer(flt_tmp_addr, flt_lea_addr, _FLT_LEN);

      /*
       * The LEA array might be smaller than ouput matrix size, so we need to
       * the computation mutiple times.
       */
      {%- if (out_len % lea_dst_size) != 0 %}
      for (uint16_t l = 0; l < lea_remain_size; ++l) {
        DMA_makeTransfer(mac_input_addr, src_lea_addr, _FLT_LEN);
        {%- if lea_opt %}
        new_mac_q15(lea_src, lea_flt);
        {%- else %}
        msp_mac_q15(&mac_params, lea_src, lea_flt, lea_res);
        {%- endif %}
        {%- if group == 1 %}
        lea_tmp[l] = (int16_t)(lea_res[0] >> 16);
        {%- else %}
        lea_dst[l] = (int16_t)(lea_res[0] >> 16);
        {%- endif %}

        mac_input_addr += flt_addr_offset;
      }

      {%- if lea_opt %}
      lea_add_params->vectorSize = lea_remain_size_aligned;
      {%- else %}
      add_params.length = lea_remain_size_aligned;
      {%- endif %}

      {%- if group == 1 %}

      {%- if has_adaptive_gen_mem and (out_len % lea_dst_size) < adaptive_gen_mem_size %}
      s = tmp_output_pos;
      {%- for n in range(out_len % lea_dst_size) %}
      lea_dst[{{ loop.index0 }}] = output->data[s];
      s++;
      {%- endfor %}

      {%- else %}
      DMA_makeTransfer(tmp_output_addr, dst_lea_addr, lea_remain_size);
      {%- endif %}

      {%- if lea_opt %}
      new_add_q15(lea_dst, lea_tmp, lea_dst);
      {%- else %}
      msp_add_q15(&add_params, lea_dst, lea_tmp, lea_dst);
      {%- endif %}

      {%- endif %}

      {%- if has_adaptive_gen_mem and (out_len % lea_dst_size) < adaptive_gen_mem_size %}
      dst_pos = tmp_output_pos;
      {%- for n in range(out_len % lea_dst_size) %}
      output->data[dst_pos] = lea_dst[{{ loop.index0 }}];
      dst_pos++;
      {%- endfor %}

      {%- else %}
      DMA_makeTransfer(dst_lea_addr, tmp_output_addr, lea_remain_size);
      {%- endif %}

      {%- if has_adaptive_gen_mem and (out_len % lea_dst_size) < adaptive_gen_mem_size %}
      tmp_output_pos += lea_remain_size;
      {%- endif %}
      tmp_output_addr += output_remain_size_offset;
      {%- endif %}

      {%- if out_len >= lea_dst_size %}
      {%- if lea_opt %}
      lea_add_params->vectorSize = _LEA_ADD_SIZE;
      {%- else %}
      add_params.length = _LEA_ADD_SIZE;
      {%- endif %}

      for (uint16_t m = lea_remain_size; m < output_len; m += _LEA_ADD_SIZE) {
        for (uint16_t l = 0; l < _LEA_ADD_SIZE; ++l) {
          DMA_makeTransfer(mac_input_addr, src_lea_addr, _FLT_LEN);
          {%- if lea_opt %}
          new_mac_q15(lea_src, lea_flt);
          {%- else %}
          msp_mac_q15(&mac_params, lea_src, lea_flt, lea_res);
          {%- endif %}

          {%- if group == 1 %}
          lea_tmp[l] = (int16_t)(lea_res[0] >> 16);
          {%- else %}
          lea_dst[l] = (int16_t)(lea_res[0] >> 16);
          {%- endif %}

          mac_input_addr += flt_addr_offset;
        }

        {%- if group == 1 %}

        DMA_makeTransfer(tmp_output_addr, dst_lea_addr, _LEA_ADD_SIZE);
        {%- if lea_opt %}
        new_add_q15(lea_dst, lea_tmp, lea_dst);
        {%- else %}
        msp_add_q15(&add_params, lea_dst, lea_tmp, lea_dst);
        {%- endif %}

        {%- endif %}

        DMA_makeTransfer(dst_lea_addr, tmp_output_addr, _LEA_ADD_SIZE);

        tmp_output_addr += output_lea_min_size_offset;
        {%- if has_adaptive_gen_mem and (out_len % lea_dst_size) < adaptive_gen_mem_size %}
        tmp_output_pos += _LEA_ADD_SIZE;
        {%- endif %}
      }
      {%- endif %}

      flt_tmp_addr += flt_channel_offset;
      output_channel_addr += output_addr_offset;
      {%- if has_adaptive_gen_mem and (out_len % lea_dst_size) < adaptive_gen_mem_size %}
      output_channel_pos += output_len;
      {%- endif %}
{%- if group == 1 %}
    }
{%- endif %}
    {%- if has_adaptive_gen_mem and flt_col_size < adaptive_gen_mem_size %}
    input_fram_pos += input_len;
    {%- else %}
    input_fram_addr += input_channel_offset;
    {%- endif %}
    flt_fram_addr += flt_addr_offset;
  }

  /* add bias and left shift */
  output_fram_addr = (uintptr_t)(output->data);

  _q15* lea_add = lea_src;
  {%- if (global_mem_buffer and out_len >= lea_buffer_size) or ((not global_mem_buffer) and out_len >= lea_src_size) %}
  uint16_t add_size = _LEA_BIAS_ADD_SIZE;
  {%- endif %}
  uintptr_t lea_add_addr = (uintptr_t)lea_add;
  for (uint16_t i = 0; i < out_channels; ++i) {
    {%- if lea_opt %}
    set_offset(bias->data[i]);
    {%- else %}
    offset_params.offset = bias->data[i];
    {%- endif %}

    {%- if (global_mem_buffer and (out_len % lea_buffer_size) != 0) or ((not global_mem_buffer) and (out_len % lea_src_size) != 0) %}

    {%- if lea_opt %}
    lea_offset_params->vectorSize = lea_remain_bias_size_aligned;
    {%- if qf > 0 %}
    lea_add_params->vectorSize = lea_remain_bias_size_aligned;
    {%- endif %}
    {%- else %}
    offset_params.length = lea_remain_bias_size_aligned;
    {%- if qf > 0 %}
    add_params.length = lea_remain_bias_size_aligned;
    {%- endif %}
    {%- endif %}

    DMA_makeTransfer(output_fram_addr, lea_add_addr, lea_bias_remain_size);
    {% for i in range(qf) %}
    {%- if lea_opt %}
    new_add_q15(lea_add, lea_add, lea_add);
    {%- else %}
    msp_add_q15(&add_params, lea_add, lea_add, lea_add);
    {%- endif %}
    {%- endfor %}
    {%- if lea_opt %}
    new_offset_q15(lea_add, lea_add);
    {%- else %}
    msp_offset_q15(&offset_params, lea_add, lea_add);
    {%- endif %}

    DMA_makeTransfer(lea_add_addr, output_fram_addr, lea_bias_remain_size);
    output_fram_addr += output_bias_remain_size_offset;
    {%- endif %}
    {%- if (global_mem_buffer and out_len >= lea_buffer_size) or ((not global_mem_buffer) and out_len >= lea_src_size) %}

    {%- if lea_opt %}
    lea_offset_params->vectorSize = add_size;
    {%- if qf > 0 %}
    lea_add_params->vectorSize = add_size;
    {%- endif %}
    {%- else %}
    offset_params.length = add_size;
    {%- if qf > 0 %}
    add_params.length = add_size;
    {%- endif %}
    {%- endif %}

    for (uint16_t j = lea_bias_remain_size; j < output_len; j += add_size) {
      DMA_makeTransfer(output_fram_addr, lea_add_addr, add_size);
      {% for i in range(qf) %}
      {%- if lea_opt %}
      new_add_q15(lea_add, lea_add, lea_add);
      {%- else %}
      msp_add_q15(&add_params, lea_add, lea_add, lea_add);
      {%- endif %}
      {%- endfor %}
      {%- if lea_opt %}
      new_offset_q15(lea_add, lea_add);
      {%- else %}
      msp_offset_q15(&offset_params, lea_add, lea_add);
      {%- endif %}

      DMA_makeTransfer(lea_add_addr, output_fram_addr, add_size);
      output_fram_addr += output_lea_bias_min_size_offset;
    }
    {%- endif %}
  }

  {%- if lea_opt %}
  offset_clear();
  add_clear();
  mac_clear();
  {%- endif %}
}

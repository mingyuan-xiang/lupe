#define _LEA_DST_SIZE {{ lea_dst_size }}
#define _LEA_REMAIN_SIZE ({{ out_len }} % _LEA_DST_SIZE)
{%- if padding %}
#define _PADDING_TOP {{ padding["top"] }}
#define _PADDING_BOTTOM {{ padding["bottom"] }}
#define _PADDING_RIGHT {{ padding["right"] }}
#define _PADDING_LEFT {{ padding["left"] }}
{%- endif %}
{% if global_mem_buffer %}
/* assign the lea buffer pointer */
#define lea_src (lea_buffer)
#define lea_flt (lea_buffer + {{ lea_src_size }})
#define lea_tmp (lea_buffer + {{ lea_src_size + lea_flt_size }})
#define lea_dst (lea_buffer + {{ lea_src_size + lea_flt_size + lea_tmp_size }})
{% endif %}
#define _INPUT_LINE_SIZE {{ in_line_size }}
#define _STRIDE_ROW_SIZE {{ stride_row }}
#define _STRIDE_ROW_LINE_SIZE (_STRIDE_ROW_SIZE * _INPUT_LINE_SIZE)
#define _STRIDE_COL_SIZE {{ stride_col }}
{% if lea_opt %}
static inline __attribute__((always_inline)) void new_add_q15(const _q15* srcA, const _q15* srcB, _q15* dst) {
  lea_add_params->input2 = MSP_LEA_CONVERT_ADDRESS(srcB);
  lea_add_params->output = MSP_LEA_CONVERT_ADDRESS(dst);

  /* Load source arguments to LEA. */
  LEAPMS0 = MSP_LEA_CONVERT_ADDRESS(srcA);
  LEAPMS1 = MSP_LEA_CONVERT_ADDRESS(lea_add_params);

  /* Invoke the LEACMD__ADDMATRIX command. */
  msp_lea_invokeCommand(LEACMD__ADDMATRIX);
}

static inline __attribute__((always_inline)) void set_fill(int16_t val) {
  fill_vector[0] = val;
  fill_vector[1] = val;
}

static inline __attribute__((always_inline)) void new_fill_q15(_q15* dst) {
  lea_fill_params->output = MSP_LEA_CONVERT_ADDRESS(dst);

  /* Load source arguments to LEA. */
  LEAPMS0 = fill_vector_addr;
  LEAPMS1 = MSP_LEA_CONVERT_ADDRESS(lea_fill_params);

  /* Invoke the LEACMD__ADDMATRIX command. */
  msp_lea_invokeCommand(LEACMD__ADDMATRIX);
}

static inline __attribute__((always_inline)) void new_mpy_q15(const _q15* srcA, const _q15* srcB, _q15* dst) {
  lea_mpy_params->input2 = MSP_LEA_CONVERT_ADDRESS(srcB);
  lea_mpy_params->output = MSP_LEA_CONVERT_ADDRESS(dst);

  /* Load source arguments to LEA. */
  LEAPMS0 = MSP_LEA_CONVERT_ADDRESS(srcA);
  LEAPMS1 = MSP_LEA_CONVERT_ADDRESS(lea_mpy_params);

  /* Invoke the LEACMD__MPYMATRIX command. */
  msp_lea_invokeCommand(LEACMD__MPYMATRIX);
}

{%- endif %}
void {{ layer_name }}(mat_t* input, mat_t* output, mat_t* weight, mat_t* bias) {
  uint16_t in_channels = input->dims[1];
  uint16_t out_channels = output->dims[1];
  uint16_t output_len = output->strides[1];
  uint16_t input_len = input->strides[1];
  uint16_t input_size = input->strides[0];

  uintptr_t output_fram_addr = (uintptr_t)(output->data);
  {%- if stride_row > 1 or stride_col > 1 %}
  uintptr_t input_fram_addr = (uintptr_t)lupe_buffer_meta.data;
  {%- else %}
  uintptr_t input_fram_addr = (uintptr_t)(input->data);
  {%- endif %}
  uintptr_t input_channel_addr = input_fram_addr;
  uintptr_t tmp_input_addr = input_channel_addr;
  uintptr_t output_addr_offset = output_len * sizeof(int16_t);

  uint16_t input_line_size = input->dims[3];

  uint16_t lea_remain_size = _LEA_REMAIN_SIZE;
  uint16_t lea_remain_size_aligned = MAKE_ALIGN_2(lea_remain_size);
  {%- if (out_len % lea_dst_size) != 0 %}
  uintptr_t remain_size_offset = lea_remain_size * sizeof(int16_t);
  {%- endif %}
  {%- if out_len >= lea_dst_size %}
  uintptr_t lea_min_size_offset = _LEA_DST_SIZE * sizeof(int16_t);
  {%- endif %}

  uintptr_t lea_src_addr = (uintptr_t)lea_src;
  uintptr_t lea_dst_addr = (uintptr_t)lea_dst;

  {%- if lea_opt %}
  add_init(lea_remain_size_aligned);
  mpy_init(lea_remain_size_aligned);
  fill_init(lea_remain_size_aligned);
  {%- else %}
  msp_add_q15_params add_params = { .length = lea_remain_size_aligned };
  msp_fill_q15_params fill_params = { .length = lea_remain_size_aligned, .value = 0 };
  msp_mpy_q15_params mpy_params = { .length = lea_remain_size_aligned };
  {%- endif %}

  uint16_t weight_pos = 0;
  uint16_t tmp_weight_pos = 0;
  {% if dma_opt %}
  uintptr_t out_bias_addr = output_fram_addr;
  {%- else %}
  uint16_t out_bias_pos = 0;
  {%- endif %}
  /* add bias */
  for (uint16_t i = 0; i < out_channels; ++i) {
    {%- if dma_opt %}
    DMA_setWord(out_bias_addr, bias->data[i], output_len);
    out_bias_addr += output_addr_offset;
    {%- else %}
    for (uint16_t j = 0; j < output_len; ++j) {
      output->data[out_bias_pos] = bias->data[i];
      ++out_bias_pos;
    }
    {%- endif %}
  }

  {%- if stride_row > 1 or stride_col > 1 %}
  /* get strided input */
  uint16_t ptwise_pos = 0;
  for (uint16_t n = 0; n < input_size; n += input_len) {
    uint16_t r_end = n + input_len;
    for (uint16_t r = n; r < r_end; r += _STRIDE_ROW_LINE_SIZE) {
      uint16_t m_end = r + input_line_size;
      for (uint16_t m = r; m < m_end; m += _STRIDE_COL_SIZE) {
        lupe_buffer_meta.data[ptwise_pos] = input->data[m];
        ++ptwise_pos;
      }
    }
  }
  {%- endif %}

  /* convolution */
  for (uint16_t i = 0; i < out_channels; ++i) {
    input_channel_addr = input_fram_addr;
    {% if (out_len % lea_dst_size) != 0 %}
    DMA_makeTransfer(output_fram_addr, lea_dst_addr, lea_remain_size);
    {% if lea_opt %}
    lea_add_params->vectorSize = lea_remain_size_aligned;
    lea_fill_params->vectorSize = lea_remain_size_aligned;
    lea_mpy_params->vectorSize = lea_remain_size_aligned;
    {%- else %}
    add_params.length = lea_remain_size_aligned;
    fill_params.length = lea_remain_size_aligned;
    mpy_params.length = lea_remain_size_aligned;
    {% endif %}
    tmp_input_addr = input_channel_addr;
    tmp_weight_pos = weight_pos;
    for (uint16_t j = 0; j < in_channels; ++j) {
      DMA_makeTransfer(tmp_input_addr, lea_src_addr, lea_remain_size);
      {% if lea_opt %}
      set_fill(weight->data[tmp_weight_pos]);

      new_fill_q15(lea_flt);

      new_mpy_q15(lea_src, lea_flt, lea_flt);
      {% if qf > 0 %}
      /* right shift the output to match up the fixed point format */
      {%- endif -%}
      {%- for i in range(qf) %}
      new_add_q15(lea_flt, lea_flt, lea_flt);
      {% endfor %}
      new_add_q15(lea_flt, lea_dst, lea_dst);
      {%- else %}
      fill_params.value = weight->data[tmp_weight_pos];

      msp_fill_q15(&fill_params, lea_flt);

      msp_mpy_q15(&mpy_params, lea_src, lea_flt, lea_flt);
      {% if qf > 0 %}
      /* right shift the output to match up the fixed point format */
      {%- endif -%}
      {%- for i in range(qf) %}
      msp_add_q15(&add_params, lea_flt, lea_flt, lea_flt);
      {% endfor %}
      msp_add_q15(&add_params, lea_flt, lea_dst, lea_dst);
      {% endif %}
      ++tmp_weight_pos;
      tmp_input_addr += output_addr_offset;
    }
    DMA_makeTransfer(lea_dst_addr, output_fram_addr, lea_remain_size);
    input_channel_addr += remain_size_offset;
    output_fram_addr += remain_size_offset;
    {%- endif %}
    {% if out_len >= lea_dst_size %}
    {% if lea_opt %}
    lea_add_params->vectorSize = _LEA_DST_SIZE;
    lea_fill_params->vectorSize = _LEA_DST_SIZE;
    lea_mpy_params->vectorSize = _LEA_DST_SIZE;
    {%- else %}
    add_params.length = _LEA_DST_SIZE;
    fill_params.length = _LEA_DST_SIZE;
    mpy_params.length = _LEA_DST_SIZE;
    {%- endif %}
    for (uint16_t m = lea_remain_size; m < output_len; m += _LEA_DST_SIZE) {
      DMA_makeTransfer(output_fram_addr, lea_dst_addr, _LEA_DST_SIZE);

      tmp_input_addr = input_channel_addr;
      tmp_weight_pos = weight_pos;
      for (uint16_t j = 0; j < in_channels; ++j) {
        DMA_makeTransfer(tmp_input_addr, lea_src_addr, _LEA_DST_SIZE);
        {% if lea_opt %}
        set_fill(weight->data[tmp_weight_pos]);

        new_fill_q15(lea_flt);

        new_mpy_q15(lea_src, lea_flt, lea_flt);
        {% if qf > 0 %}
        /* right shift the output to match up the fixed point format */
        {%- endif -%}
        {%- for i in range(qf) %}
        new_add_q15(lea_flt, lea_flt, lea_flt);
        {% endfor %}
        new_add_q15(lea_flt, lea_dst, lea_dst);
        {%- else %}
        fill_params.value = weight->data[tmp_weight_pos];

        msp_fill_q15(&fill_params, lea_flt);

        msp_mpy_q15(&mpy_params, lea_src, lea_flt, lea_flt);
        {% if qf > 0 %}
        /* right shift the output to match up the fixed point format */
        {%- endif -%}
        {%- for i in range(qf) %}
        msp_add_q15(&add_params, lea_flt, lea_flt, lea_flt);
        {% endfor %}
        msp_add_q15(&add_params, lea_flt, lea_dst, lea_dst);
        {% endif %}
        ++tmp_weight_pos;
        tmp_input_addr += output_addr_offset;
      }
      DMA_makeTransfer(lea_dst_addr, output_fram_addr, _LEA_DST_SIZE);
      input_channel_addr += lea_min_size_offset;
      output_fram_addr += lea_min_size_offset;
    }
    {%- endif %}
    weight_pos += in_channels;
  }

  {%- if lea_opt %}
  fill_clear();
  mpy_clear();
  add_clear();
  {%- endif %}
}
